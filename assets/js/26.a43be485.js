(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{529:function(s,a,t){"use strict";t.r(a);var e=t(6),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h3",{attrs:{id:"centos-下使用docker-安装-lnmp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#centos-下使用docker-安装-lnmp"}},[s._v("#")]),s._v(" centos 下使用docker 安装 lnmp")]),s._v(" "),t("h4",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言:")]),s._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    最近做了一个小程序项目，然后买了一个服务器，之前搭建服务器就是直接用yum装的\n    然后最近面试遇到了很多使用docker的问题，所以就想学习一下docker。这期就准备使用docker安装一个环境使用一下。\n    服务器镜像使用的是centos8\n")])])]),t("h4",{attrs:{id:"_1-准备docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-准备docker"}},[s._v("#")]),s._v(" 1. 准备docker")]),s._v(" "),t("p",[s._v("下载安装包")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("yum install -y yum-utils device-mapper-persistent-data lvm2\n")])])]),t("p",[s._v("可能会遇到网络问题，换一下源")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("yum-config-manager --add-repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo\n")])])]),t("p",[s._v("更新缓存，安装docker-ce")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("yum makecache fast\nyum install docker-ce\n")])])]),t("p",[s._v("启动docker")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("   systemctl enable docker\n   systemctl start docker\n   \n   docker run hello-world\n")])])]),t("p",[s._v("添加国内镜像加速，在这边用的是阿里云的镜像加速,下面是配置教程")]),s._v(" "),t("ol",[t("li",[s._v("到阿里云获取镜像地址\n登录阿里云控制台-容器镜像服务-镜像工具-镜像加速器 到此处获取镜像地址，这边因为每个人的不通，我自己打码了\n"),t("img",{attrs:{src:"https://qiniu.lixhuan.com/lnmp-docker1.png",alt:"镜像服务1"}})]),s._v(" "),t("li",[s._v("然后根据下面提供的步骤依次执行代码")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('    sudo mkdir -p /etc/docker\n    sudo tee /etc/docker /daemon.json <<-\'EOF\'\n    {\n        "registry-mirrors": ["https://xxxx.mirror.aliyuncs.com"]\n    }\n    EOF\n    sudo systemctl daemon-reload\n    sudo systemctl restart docker\n')])])]),t("p",[s._v("至此，docker安装结束")]),s._v(" "),t("h3",{attrs:{id:"_2-拉取镜像-nginx1-21-1-mysql5-7-php7-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-拉取镜像-nginx1-21-1-mysql5-7-php7-4"}},[s._v("#")]),s._v(" 2.拉取镜像(nginx1.21.1,mysql5.7,php7.4)")]),s._v(" "),t("p",[s._v("此处备注一下docker镜像地址，有需要的话到此处去搜索镜像进行pull\n"),t("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("docker镜像地址"),t("OutboundLink")],1)]),s._v(" "),t("ol",[t("li",[s._v("拉取mysql镜像")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    docker pull mysql:5.7\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("启动容器")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("docker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3306")]),s._v(":3306 -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" --name do-mysql mysql:5.7\n\n-p 端口映射\n-e 配置的密码\n--name 容器名称\n")])])]),t("p",[s._v("管理容器我放到最后再讲解，因为后面遇到几个坑")]),s._v(" "),t("p",[s._v("3.拉取php")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("docker pull php:7.4-fpm\n")])])]),t("p",[s._v("4.创建phpfpm 容器")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("docker run -d -v /home/www/html:/var/www/html -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9000")]),s._v(":9000 --link do-mysql:mysql --name do-phpfom php:7.4-fpm\n\n-v 挂载本地目录到镜像\n--link 挂载容器 后面跟的是容器名称\n")])])]),t("p",[s._v("5.进入fpm容器并修改配置项")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入容器")]),s._v("\ndocker "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it do_phpfpm "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装扩展")]),s._v("\ndocker-php-ext-install pdl_mysql "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装更多扩展请自行配置")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# redis")]),s._v("\npecl "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" redis "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" docker-php-ext-enable redis\n")])])]),t("p",[s._v("6.获取nginx 镜像")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("docker pull nginx:1.21.1\n")])])]),t("ol",{attrs:{start:"7"}},[t("li",[s._v("启动nginx容器")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("docker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 -0 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("443")]),s._v(":443 -v /home/www/html:/var/www/html -v /etc/nginx/conf:/etc/nginx/conf.d  --link do_phpfpm:phpfpm --name do_nginx nginx:1.21.1\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 此处我把配置目录和文件目录挂载到镜像上面，方便在本地做配置和放入证书文件等")]),s._v("\n")])])]),t("ol",{attrs:{start:"8"}},[t("li",[s._v("进入nginx 容器并修改配置")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("docker "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it do_nginx "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" \n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /etc/nginx/conf.d/\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 此处会没有vim，需要装一下")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" update\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#default文件可能因为 被挂载了，文件不存在，去找一份默认配置放到里面即可")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" default.conf\n")])])]),t("p",[s._v("然后找到php配置，修改为如下内容")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    location ~ \\.php$ {\n        root /var/www/html;\n        fastcgi_pass phpfpm:9000; # 这地方的phpfpm 是挂载进来的phpfpm，也就是--linnk时的do_phpfpm\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include      fastcgi_params;\n    }\n")])])]),t("p",[s._v("保存退出")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("nignx -s reload \n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#退出容器")]),s._v("\n")])])]),t("h3",{attrs:{id:"_3-使用docker-compose-管理容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用docker-compose-管理容器"}},[s._v("#")]),s._v(" 3.使用docker-compose 管理容器")]),s._v(" "),t("h3",{attrs:{id:"_4-遇到的问题以及解决方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-遇到的问题以及解决方法"}},[s._v("#")]),s._v(" 4. 遇到的问题以及解决方法")]),s._v(" "),t("p",[s._v("1.数据库使用root账号连接的时候可能找不到数据库\n出现原因：laravel框架直接连接本地数据库，然后连接地址是直接放的 mysql:3306, 这个地方的mysql是link的mysql\n解决方法： 我是直接创建了个账号，然后数据库该账号只有一个，这样就解决了\n2. php的pdo_mysql 等扩展找不到\n解决方法: 进入 phpfpm 容器， 找到php.ini.develop 文件，修改里面的扩展把注释去掉")]),s._v(" "),t("p",[s._v("之后出现的问题我会一一更新。。。")])])}),[],!1,null,null,null);a.default=n.exports}}]);